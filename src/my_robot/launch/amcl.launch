<launch>

  <!-- Map Server -->
  <arg name="map_file" default="$(find my_robot)/maps/my_map.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- AMCL Node -->
  <node name="amcl" pkg="amcl" type="amcl" output="screen">

    <!-- Overall filter parameters -->

    <!-- Minimum allowed number of particles (int, default: 100) -->
    <param name="min_particles" value="25"/>
    <!-- Maximum allowed number of particles (int, default: 5000) -->
    <param name="max_particles" value="200"/>
    <!-- Maximum error between the true distribution and the estimated distribution (double, default: 0.01) -->
    <param name="kld_err" value="0.01"/>
    <!-- Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err (double, default: 0.99) -->
    <param name="kld_z" value="0.99"/>
    <!-- Translational movement required before performing a filter update (double, default: 0.2 meters) -->
    <param name="update_min_d" value="0.2"/>
    <!-- Rotational movement required before performing a filter update (double, default: π/6.0 radians) -->
    <param name="update_min_a" value="0.5235987755982988"/>
    <!-- Number of filter updates required before resampling (int, default: 2) -->
    <param name="xxresample_interval" value="2"/>
    <!-- Time with which to post-date the transform that is published, to indicate that this transform is valid into the future (double, default: 0.1 seconds) -->
    <param name="transform_tolerance" value="0.2"/>
    <!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001 (double, default: 0.0 (disabled)) -->
    <param name="recovery_alpha_slow" value="0.001"/>
    <!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1 (double, default: 0.0 (disabled)) -->
    <param name="recovery_alpha_fast" value="0.1"/>
    <!-- Initial pose mean (x), used to initialize filter with Gaussian distribution (double, default: 0.0 meters) -->
    <param name="initial_pose_x" value="0"/>
    <!-- Initial pose mean (y), used to initialize filter with Gaussian distribution (double, default: 0.0 meters) -->
    <param name="initial_pose_y" value="0"/>
    <!-- Initial pose mean (yaw), used to initialize filter with Gaussian distribution (double, default: 0.0 radians) -->
    <param name="initial_pose_a" value="0.0"/>
    <!-- Initial pose covariance (x*x), used to initialize filter with Gaussian distribution (double, default: 0.5*0.5 meters) -->
    <param name="initial_cov_xx" value="0.25"/>
    <!-- Initial pose covariance (y*y), used to initialize filter with Gaussian distribution (double, default: 0.5*0.5 meters) -->
    <param name="initial_cov_yy" value="0.25"/>
    <!-- Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution (double, default: (π/12)*(π/12) radian) -->
    <param name="initial_cov_aa" value="0.06853891945200942"/>
    <!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable (double, default: -1.0 Hz) -->
    <param name="gui_publish_rate" value="-0.1"/>
    <!-- Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable (double, default: 0.5 Hz) -->
    <param name="save_pose_rate" value="0.5"/>
    <!-- When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map. New in navigation 1.4.2 (bool, default: false) -->
    <param name="use_map_topic" value="false"/>
    <!-- When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received. New in navigation 1.4.2 (bool, default: false) -->
    <param name="first_map_only" value="false"/>
    <!-- When set to true, will reduce the resampling rate when not needed and help avoid particle deprivation. The resampling will only happen if the effective number of particles (N_eff = 1/(sum(k_i^2))) is lower than half the current number of particles. Reference: Grisetti, Giorgio, Cyrill Stachniss, and Wolfram Burgard. "Improved techniques for grid mapping with rao-blackwellized particle filters." IEEE transactions on Robotics 23.1 (2007): 34 (bool, default: false) -->
    <param name="selective_resampling" value="false"/>

    <!-- Trajectory Rollout planner initialized with param meter_scoring not set. Set it to true to make your settings robust against changes of costmap resolution (bool, default: false) -->
    <param name="meter_scoring" value="true"/>

    <!-- Laser model parameters -->

    <!-- Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used. (double, default: -1.0) -->
    <param name="laser_min_range" value="-1.0"/>
    <!-- Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used (double, default: -1.0) -->
    <param name="laser_max_range" value="-1.0"/>
    <!-- How many evenly-spaced beams in each scan to be used when updating the filter (int, default: 30) -->
    <param name="laser_max_beams" value="30"/>
    <!-- Mixture weight for the z_hit part of the model (double, default: 0.95) -->
    <param name="laser_z_hit" value="0.95"/>
    <!-- Mixture weight for the z_short part of the model (double, default: 0.1) -->
    <param name="laser_z_short" value="0.1"/>
    <!-- Mixture weight for the z_max part of the model (double, default: 0.05) -->
    <param name="laser_z_max" value="0.05"/>
    <!-- Mixture weight for the z_rand part of the model (double, default: 0.05) -->
    <param name="laser_z_rand" value="0.5"/>
    <!-- Standard deviation for Gaussian model used in z_hit part of the model (double, default: 0.2 meters) -->
    <param name="laser_sigma_hit" value="0.2"/>
    <!-- Exponential decay parameter for z_short part of model (double, default: 0.1) -->
    <param name="laser_lambda_short" value="0.1"/>
    <!-- Maximum distance to do obstacle inflation on map, for use in likelihood_field model (double, default: 2.0 meters) -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <!-- Which model to use, either beam, likelihood_field, or likelihood_field_prob (same as likelihood_field but incorporates the beamskip feature, if enabled) (string, default: "likelihood_field") -->
    <param name="laser_model_type" value="likelihood_field"/>

    <!-- Odometry model parameters -->

    <!-- Which model to use, either "diff", "omni", "diff-corrected" or "omni-corrected" (string, default: "diff") -->
    <param name="odom_model_type" value="diff-corrected"/>
    <!-- Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion (double, default: 0.2) -->
    <param name="odom_alpha1" value="0.05"/>
    <!-- Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion (double, default: 0.2) -->
    <param name="odom_alpha2" value="0.05"/>
    <!-- Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion (double, default: 0.2) -->
    <param name="odom_alpha3" value="0.10"/>
    <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion (double, default: 0.2) -->
    <param name="odom_alpha4" value="0.05"/>
    <!-- Translation-related noise parameter (only used if model is "omni") (double, default: 0.2) -->
    <param name="odom_alpha5" value="0.2"/>
    <!-- Which frame to use for odometry (string, default: "odom") -->
    <param name="odom_frame_id" value="odom"/>
    <!-- #####Which frame to use for the robot base (string, default: "base_link") -->
    <param name="base_frame_id" value="robot_footprint"/>
    <!-- The name of the coordinate frame published by the localization system (string, default: "map") -->
    <param name="global_frame_id" value="map"/>
    <!-- Set this to false to prevent amcl from publishing the transform between the global frame and the odometry frame (bool, default: true) -->
    <param name="tf_broadcast" value="true"/>

  </node>

  <!-- Move Base -->
  <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
    <param name="base_global_planner" value="navfn/NavfnROS" />
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find my_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find my_robot)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find my_robot)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find my_robot)/config/base_local_planner_params.yaml" command="load" />
  </node>

</launch>